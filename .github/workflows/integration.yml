name: 🐘 Integration tests

on:
  pull_request:
  push:
    branches: [ main ]

concurrency:
  group: integ-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash

env:
  DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb  # pragma: allowlist secret
  CELERY_BROKER_URL: redis://localhost:6379/0
  CELERY_BACKEND_URL: redis://redis:6379/1
  FASTAPI_ENDPOINT: http://app:8000/api/v1/images/scraped
  GOOGLE_PHOTOS_URL: https://photos.google.com/
  GOOGLE_SEARCH_URL: https://photoslibrary.googleapis.com/v1/mediaItems:search
  GOOGLE_USERINFO_URL: https://www.googleapis.com/oauth2/v3/userinfo
  SESSION_COOKIE_PATH: ~/.gp_session.json
  INGESTION_MODE: api
  INGESTION_YEAR: 2025
  INGESTION_START_PAGE: 1
  INGESTION_END_PAGE: 100
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }} # pragma: allowlist secret
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }} # pragma: allowlist secret
  GOOGLE_REDIRECT_URI: http://localhost:8000/api/auth/callback
  ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}  # pragma: allowlist secret

jobs:
  # --- Smoke Tests on PRs ---
  smoke:
    if: github.event_name == 'pull_request'
    name: 🐘 Integration tests
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - uses: ./.github/actions/python-setup
        with:
          python-version: "3.12"

      - name: Install app deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env for Docker Compose
        run: |
          {
            echo "ENCRYPTION_KEY=${ENCRYPTION_KEY:-$(python -c 'from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())')}"
            echo "DATABASE_URL=${DATABASE_URL}"
            echo "CELERY_BROKER_URL=${CELERY_BROKER_URL}"
            echo "CELERY_BACKEND_URL=${CELERY_BACKEND_URL}"
            echo "FASTAPI_ENDPOINT=${FASTAPI_ENDPOINT}"
            echo "GOOGLE_PHOTOS_URL=${GOOGLE_PHOTOS_URL}"
            echo "GOOGLE_SEARCH_URL=${GOOGLE_SEARCH_URL}"
            echo "GOOGLE_USERINFO_URL=${GOOGLE_USERINFO_URL}"
            echo "SESSION_COOKIE_PATH=${SESSION_COOKIE_PATH}"
            echo "INGESTION_MODE=${INGESTION_MODE}"
            echo "INGESTION_YEAR=${INGESTION_YEAR}"
            echo "INGESTION_START_PAGE=${INGESTION_START_PAGE}"
            echo "INGESTION_END_PAGE=${INGESTION_END_PAGE}"
            echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}"
            echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}"
            echo "GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}"
            echo "ENCRYPTION_KEY=${ENCRYPTION_KEY}"
          } > .env

      - name: Start service (app + db)
        run: docker compose up -d app db

      - name: Wait for Postgres (inside container)
        run: docker compose exec -T db sh -c 'for i in $(seq 1 60);
          do pg_isready -U postgres -d duplicatefinder && exit 0;
          echo "waiting for postgres..."; sleep 2; done; exit 1'

      - name: Wait for app health (inside container, with retries)
        run: |
          docker compose exec -T app sh -lc '
            # ensure curl exists (alpine/debian/ubi handled)
            if ! command -v curl >/dev/null 2>&1; then
              (apk add --no-cache curl >/dev/null 2>&1) || \
              (apt-get update -y && apt-get install -y curl >/dev/null 2>&1) || \
              (microdnf install -y curl >/dev/null 2>&1) || true
            fi
            for i in $(seq 1 60); do
              if curl -fsS http://localhost:8000/api/health >/dev/null; then
                echo "Health OK"; exit 0
              fi
              echo "Waiting for /api/health... ($i/60)"
              sleep 2
            done
            echo "Health check failed; dumping logs" >&2
            exit 1
          ' || (docker compose logs app && exit 1)

      - name: Health check (inside container)
        run: |
          docker compose exec -T app sh -lc '
            (command -v curl >/dev/null 2>&1) || (apk add --no-cache curl 2>/dev/null || apt-get update && apt-get install -y curl 2>/dev/null || true)
            set -e
            curl -sSf http://localhost:8000/api/health
          '

      - name: Dump app logs on failure
        if: failure()
        run: docker compose logs app

      - name: Stop services
        if: always()
        run: docker compose down -v

  # --- Full integration on push to main ---
  full:
    if: github.event_name == 'push'
    name: 🐘 Integration tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass # pragma: allowlist secret
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - uses: ./.github/actions/python-setup
        with:
          python-version: "3.12"

      - name: Install other dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: List package versions
        run: pip list

      - name: Create .env for Docker Compose
        run: |
          {
            echo "ENCRYPTION_KEY=${ENCRYPTION_KEY:-$(python -c 'from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())')}"
            echo "DATABASE_URL=${DATABASE_URL}"
            echo "CELERY_BROKER_URL=${CELERY_BROKER_URL}"
            echo "CELERY_BACKEND_URL=${CELERY_BACKEND_URL}"
            echo "FASTAPI_ENDPOINT=${FASTAPI_ENDPOINT}"
            echo "GOOGLE_PHOTOS_URL=${GOOGLE_PHOTOS_URL}"
            echo "GOOGLE_SEARCH_URL=${GOOGLE_SEARCH_URL}"
            echo "GOOGLE_USERINFO_URL=${GOOGLE_USERINFO_URL}"
            echo "SESSION_COOKIE_PATH=${SESSION_COOKIE_PATH}"
            echo "INGESTION_MODE=${INGESTION_MODE}"
            echo "INGESTION_YEAR=${INGESTION_YEAR}"
            echo "INGESTION_START_PAGE=${INGESTION_START_PAGE}"
            echo "INGESTION_END_PAGE=${INGESTION_END_PAGE}"
            echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}"
            echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}"
            echo "GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}"
            echo "ENCRYPTION_KEY=${ENCRYPTION_KEY}"
          } > .env

      - name: Start service (app + db)
        run: docker compose up -d app db

      - name: Apply DB migrations (if any)
        run: |
          if [ -f alembic.ini ]; then alembic upgrade head; fi || true

      - name: Wait for Postgres
        run: docker compose exec -T db sh -c 'while ! pg_isready -U postgres -d duplicatefinder; do sleep 1; done'

      - name: Run integration tests (pytest suite)
        run: docker compose run --rm app pytest -m integration --cov=backend --cov=frontend --disable-warnings

      - name: Stop db
        run: docker compose stop db
