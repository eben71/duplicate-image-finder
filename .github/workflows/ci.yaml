name: Continuous Integration

on:
  push:
    branches: 
    - main 
  pull_request:
    branches:  
    - main 

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        # GitHub skips to next step only when health-check passes
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql://testuser:testpass@db:5432/testdb
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_BACKEND_URL: redis://redis:6379/1
      FASTAPI_ENDPOINT: http://app:8000/api/v1/images/scraped
      GOOGLE_PHOTOS_URL: https://photos.google.com/
      BATCH_SIZE: 50
      TIMEOUT: 30000
      SCROLL_DEPTH: 5
      SESSION_COOKIE_PATH: ~/.gp_session.json
      INGESTION_MODE: scrape

    # ---- 1. Define a build matrix if you want to test multiple interpreters ----
    strategy:
      matrix:
        python-version: ["3.11"]   # add 3.12 here later if you wish

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: "pip"  

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade ruff black mypy pytest
        if [[ -f requirements.txt ]]; then
          pip install -r requirements.txt
        elif [[ -f pyproject.toml ]]; then
          pip install .[dev]  || pip install -r requirements-dev.txt
        fi

    - name: List package versions
      run: pip list

    - name: Run linting
      run: make ci
    
    - name: Docker build
      run: make build

    - name: Verify Playwright version match
      run: |
        python -c "from core.version_check import check_playwright_version; check_playwright_version()"

    # ---------- üõ†Ô∏è  Alembic smoke-test ----------
    - name: Run Alembic migrations inside app container
      run: |
        docker-compose up -d
        # Wait for the app service to be healthy
        sleep 10  # Adjust if needed for service startup
        docker-compose exec -T app alembic -c backend/alembic.ini upgrade head
        docker-compose exec -T app alembic -c backend/alembic.ini revision --autogenerate -m "check" || true
        test -z "$(git status --porcelain | grep migrations)" || (echo "Missing migration!" && exit 1)

    - name: Run tests inside app container
      run: make tests