name: CI (unit + coverage)

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

permissions:
  contents: read

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    env:
      DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb  # pragma: allowlist secret
      CELERY_BROKER_URL: redis://localhost:6379/0
      CELERY_BACKEND_URL: redis://redis:6379/1
      FASTAPI_ENDPOINT: http://app:8000/api/v1/images/scraped
      GOOGLE_PHOTOS_URL: https://photos.google.com/
      GOOGLE_SEARCH_URL: https://photoslibrary.googleapis.com/v1/mediaItems:search
      GOOGLE_USERINFO_URL: https://www.googleapis.com/oauth2/v3/userinfo
      SESSION_COOKIE_PATH: ~/.gp_session.json
      INGESTION_MODE: api
      INGESTION_YEAR: 2025
      INGESTION_START_PAGE: 1
      INGESTION_END_PAGE: 100
      # Only add these if your integration tests truly need Google:
      GOOGLE_CLIENT_ID: dummy-client-id # pragma: allowlist secret
      GOOGLE_CLIENT_SECRET: dummy-client-secret # pragma: allowlist secret
      GOOGLE_REDIRECT_URI: http://localhost:8000/api/auth/callback
      ENCRYPTION_KEY: dummy-32-byte-key-for-tests-only  # pragma: allowlist secret

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with: { python-version: '3.12' }

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: pip-${{ runner.os }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt || true
        pip install ruff black coverage pytest

    - name: List package versions
      run: pip list

    - name: Run linting
      run: make ci

    - name: Generate ENCRYPTION_KEY for unit tests
      run: |
        python - <<'PY' >> $GITHUB_ENV
          from cryptography.fernet import Fernet
          print("ENCRYPTION_KEY=" + Fernet.generate_key().decode())
        PY

    - name: Tests + Coverage (unit only)
      run: |
        coverage run -m pytest -q
        coverage xml
        coverage report  # enforces fail_under from pyproject.toml

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
          name: coverage-xml
          path: coverage.xml
