name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        # GitHub skips to next step only when health-check passes
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

    # ---- 1. Define a build matrix if you want to test multiple interpreters ----
    strategy:
      matrix:
        python-version: ["3.12"]   # add 3.11 here later if you wish

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: "pip"  

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade ruff black mypy pytest
        if [[ -f requirements.txt ]]; then
          pip install -r requirements.txt
        elif [[ -f pyproject.toml ]]; then
          pip install .[dev]  || pip install -r requirements-dev.txt
        fi

    # ---------- üõ†Ô∏è  Alembic smoke-test ----------
    - name: Run Alembic migrations
      working-directory: backend
      run: |
        alembic upgrade head
        alembic revision --autogenerate -m "check" && \
          test -z "$(git status --porcelain | grep migrations)" || \
          (echo "Missing migration!" && exit 1)

    # ---------- üíÖ  Lint / style ----------
    - name: Lint & style checks
      run: |
        ruff check .
        ruff format --check .
        black --check .
        mypy .

    # ---------- ‚úÖ  Unit tests ----------
    - name: Run tests
      run: |
        pytest -q --exitfirst --maxfail=1

    # ---------- üê≥  Docker build ----------
    - name: Docker build (no push)
      run: |
        docker build -t duplicate-image-finder:test .